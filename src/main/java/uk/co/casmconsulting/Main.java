package uk.co.casmconsulting;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.SQLException;

public class Main extends JDialog {
    private JPanel contentPane;
    private JButton buttonCopy;
    private JButton buttonUpdate;
    private JButton buttonCancel;
    private JTextArea textArea1;

    private PortForwarding pfwd;
    private Connection postgresConnection;

    public Main() throws SQLException, IOException {
        // UI stuff
        setupUI();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonCopy);

        buttonUpdate.addActionListener(e -> onUpdate());
        buttonCopy.addActionListener(e -> onInit());
        buttonCancel.addActionListener(e -> onStop());

        // stop when close button of the JFrame is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onStop();
            }
        });


        PrintStream printStream = new PrintStream(new JTextAreaOutputStream(textArea1));
        System.setOut(printStream);
        System.setErr(printStream);
        System.out.println("Welcome to Method52 Database Connector. This program will connect you to " + new Params());
    }

    private synchronized void onInit() {
        buttonCopy.setEnabled(false);
        buttonUpdate.setEnabled(false);
        new MyWorker().execute();
    }

    private synchronized void onUpdate() {
        try {
            ConnectAndRun.updateForeignTable(postgresConnection);
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void onStop() {
        if (pfwd != null) {
            System.out.println("Closing connection");
            pfwd.stop();
        }
        dispose();

    }

    public static void main(String[] args) throws SQLException, IOException {
        Main dialog = new Main();
        dialog.setTitle("Method52 data connector");
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     */
    private void setupUI() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setAutoscrolls(true);
        contentPane.setMinimumSize(new Dimension(350, 300));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder("Status"));
        textArea1 = new JTextArea();
        textArea1.setEditable(false);
        textArea1.setEnabled(false);
        textArea1.setLineWrap(true);
        scrollPane1.setViewportView(textArea1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonCopy = new JButton();
        buttonCopy.setText("Copy all data");
        panel2.add(buttonCopy, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonUpdate = new JButton();
        buttonUpdate.setText("Get new data");
        panel2.add(buttonUpdate, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Quit");
        panel2.add(buttonCancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private class MyWorker extends SwingWorker {
        @Override
        protected Object doInBackground() throws Exception {
            try {
                Params params = new Params();
                if (pfwd != null) {
                    pfwd.stop();
                }
                pfwd = new PortForwarding();
                pfwd.start(params.user, params.host);
                postgresConnection = ConnectAndRun.getPostgresConnection();
                ConnectAndRun.initPostgresForeignTable(postgresConnection, params.db, params.table);
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Error: " + e.getMessage());
                done();
            }
            return null;
        }

        @Override
        protected void done() {
            super.done();
            buttonCopy.setEnabled(true);
            buttonUpdate.setEnabled(true);
        }
    }
}
